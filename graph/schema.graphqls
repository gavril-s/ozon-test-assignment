type ContentMeta {
  author: String!
  publishedAt: String!
}

type Post {
  id: ID!
  title: String!
  contentMeta: ContentMeta!
  content: String!
  commentsEnabled: Boolean!
}

type PostSnippet {
  postID: ID!
  title: String!
  contentMeta: ContentMeta!
  contentSnippet: String!
}

type PostSnippetConnection {
  edges: [PostSnippetEdge!]!
  pageInfo: PageInfo!
}

type PostSnippetEdge {
  cursor: ID!
  node: PostSnippet!
}

type Comment {
  id: ID!
  postID: ID!
  contentMeta: ContentMeta!
  content: String!
  replies: CommentConnection!
}

type CommentConnection {
  edges: [CommentEdge!]!
  pageInfo: PageInfo!
}

type CommentEdge {
  cursor: ID!
  node: Comment!
}

type PageInfo {
  endCursor: ID!
  hasNextPage: Boolean!
}

type Query {
  post(id: ID!): Post
  postSnippets(snippetLength: Int, first: Int, after: ID): PostSnippetConnection!
  comments(postID: ID!, parentID: ID, first: Int, depth: Int, after: ID): CommentConnection!
}

type Mutation {
  createPost(title: String!, author: String!, content: String!, commentsEnabled: Boolean!): Post!
  createComment(postID: ID!, parentID: ID, author: String!, content: String!): Comment!
}

type Subscription {
  commentAdded(postID: ID!): Comment!
}
